# Note that any variable set in this file overrides a value set within the Azure pipeline UX.
# Therefore, do not set default values here, but instead do it within a template script.
#
#   parameters:
#   - name: is_featurizers_build
#     displayName: "Is Featurizers Build"
#     type: boolean
#     default: false

jobs:
- job: Windows_py_Wheels
  pool: 'Win-CPU-2019'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    MsbuildArguments: '-maxcpucount'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    EnvSetupScript: setup_env.bat
    buildArch: x64
    setVcvars: true
    BuildConfig: 'Release'
  timeoutInMinutes: 60
  workspace:
    clean: all

  steps:
  - checkout: self
    clean: true
    submodules: recursive

  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(python.version)
      addToPath: true
      architecture: 'x64'
  - template: templates/set-test-data-variables-step.yml

  - template: templates/set-featurizer-build-flag-step.yml
    parameters:
      is_featurizers_build: $(is_featurizers_build)

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     python -m pip install -q pyopenssl setuptools wheel numpy==1.16.6

    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'

  - powershell: |
     $Env:USE_MSVC_STATIC_RUNTIME=1
     $Env:ONNX_ML=1
     $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DProtobuf_USE_STATIC_LIBS=ON -DONNX_USE_LITE_PROTO=ON -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=$(buildArch)-windows-static"
     python setup.py bdist_wheel
     Get-ChildItem -Path dist/*.whl | foreach {pip --disable-pip-version-check install --upgrade $_.fullname}   
    workingDirectory: '$(Build.SourcesDirectory)\cmake\external\onnx'
    displayName: 'Install ONNX'

  - task: PythonScript@0
    displayName: 'BUILD'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config RelWithDebInfo --enable_lto --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_generator "Visual Studio 16 2019" --build_wheel --use_openmp --enable_onnx_tests $(FeaturizerBuildFlag) --parallel'
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: CopyFiles@2
    displayName: 'Copy Python Wheel to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo'
      Contents: '**\dist\*.whl'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: ONNXRuntime python wheel'
    inputs:
      ArtifactName: onnxruntime

  - template: templates/component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

  - template: templates/clean-agent-build-directory-step.yml
